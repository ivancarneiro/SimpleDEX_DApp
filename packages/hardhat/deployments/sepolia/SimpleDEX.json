{
  "address": "0x44f1de22eBCDFA843F96E126b24889Abb7519804",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "TokenSwapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountAIn",
          "type": "uint256"
        }
      ],
      "name": "swapAforB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountBOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountBIn",
          "type": "uint256"
        }
      ],
      "name": "swapBforA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountAOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x157378fe4273ed696ed2ce549774da2d63b42a292062946ea6ee6eb49139bd02",
  "receipt": {
    "to": null,
    "from": "0x115Ed286AB183fC4e8aa19Fd12780529ff7e71b7",
    "contractAddress": "0x44f1de22eBCDFA843F96E126b24889Abb7519804",
    "transactionIndex": 63,
    "gasUsed": "1080561",
    "logsBloom": "0x
    "blockHash": "0x946273be1ba45907a460874f87e62f57ca0f64529795e15bcc976c9ee00e8486",
    "transactionHash": "0x157378fe4273ed696ed2ce549774da2d63b42a292062946ea6ee6eb49139bd02",
    "logs": [
      {
        "transactionIndex": 63,
        "blockNumber": 7280264,
        "transactionHash": "0x157378fe4273ed696ed2ce549774da2d63b42a292062946ea6ee6eb49139bd02",
        "address": "0x44f1de22eBCDFA843F96E126b24889Abb7519804",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000115ed286ab183fc4e8aa19fd12780529ff7e71b7"
        ],
        "data": "0x",
        "logIndex": 184,
        "blockHash": "0x946273be1ba45907a460874f87e62f57ca0f64529795e15bcc976c9ee00e8486"
      }
    ],
    "blockNumber": 7280264,
    "cumulativeGasUsed": "11434008",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xebeE20D08F66Ad134a4D7a2E68F0F55779a0E845",
    "0xA03CFD875C1483414d7C11E9233e2F75bABc4347"
  ],
  "numDeployments": 1,
  "solcInputHash": "3c50245c6c779bbbe1b5c756860f7abd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"TokenSwapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAIn\",\"type\":\"uint256\"}],\"name\":\"swapAforB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBIn\",\"type\":\"uint256\"}],\"name\":\"swapBforA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ivan Carneiro\",\"details\":\"A simple decentralized exchange implementation that enables swapping between two ERC20 tokens using the constant product formula (x+dx)(y-dy)=xy for price calculation.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"LiquidityAdded(address,uint256,uint256)\":{\"details\":\"Emitted when liquidity is added to the pool by the owner\",\"params\":{\"amountA\":\"Amount of TokenA added\",\"amountB\":\"Amount of TokenB added\",\"provider\":\"Address of the liquidity provider (owner)\"}},\"LiquidityRemoved(address,uint256,uint256)\":{\"details\":\"Emitted when liquidity is removed from the pool by the owner\",\"params\":{\"amountA\":\"Amount of TokenA removed\",\"amountB\":\"Amount of TokenB removed\",\"provider\":\"Address of the liquidity provider (owner)\"}},\"TokenSwapped(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when a token swap occurs\",\"params\":{\"amountIn\":\"Amount of tokens being sold\",\"amountOut\":\"Amount of tokens being bought\",\"tokenIn\":\"Address of the token being sold\",\"tokenOut\":\"Address of the token being bought\",\"user\":\"Address of the user performing the swap\"}}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"details\":\"Allows only the owner to add liquidity to the pool\",\"params\":{\"amountA\":\"Amount of TokenA to add\",\"amountB\":\"Amount of TokenB to add\"}},\"constructor\":{\"details\":\"Constructor initializes the DEX with addresses of both tokens\",\"params\":{\"_tokenA\":\"Address of the first token\",\"_tokenB\":\"Address of the second token\"}},\"getPrice(address)\":{\"details\":\"Returns the current price of the specified token in terms of the other token\",\"params\":{\"_token\":\"Address of the token to get the price for\"},\"returns\":{\"_0\":\"Price of the token with 18 decimal places\"}},\"getReserves()\":{\"details\":\"Returns the current reserves of both tokens in the pool\",\"returns\":{\"reserveA\":\"Current balance of TokenA\",\"reserveB\":\"Current balance of TokenB\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidity(uint256,uint256)\":{\"details\":\"Allows only the owner to remove liquidity from the pool\",\"params\":{\"amountA\":\"Amount of TokenA to remove\",\"amountB\":\"Amount of TokenB to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"swapAforB(uint256)\":{\"details\":\"Swaps TokenA for TokenB using the constant product formula\",\"params\":{\"amountAIn\":\"Amount of TokenA to swap\"},\"returns\":{\"amountBOut\":\"Amount of TokenB received\"}},\"swapBforA(uint256)\":{\"details\":\"Swaps TokenB for TokenA using the constant product formula\",\"params\":{\"amountBIn\":\"Amount of TokenB to swap\"},\"returns\":{\"amountAOut\":\"Amount of TokenA received\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"SimpleDEX\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"notice\":\"Only the owner can call this functionTokens must be approved before calling this function\"},\"getPrice(address)\":{\"notice\":\"Price is expressed as how many of the other token you get for 1 of this token\"},\"removeLiquidity(uint256,uint256)\":{\"notice\":\"Only the owner can call this function\"},\"swapAforB(uint256)\":{\"notice\":\"Tokens must be approved before calling this function\"},\"swapBforA(uint256)\":{\"notice\":\"Tokens must be approved before calling this function\"},\"tokenA()\":{\"notice\":\"The first token in the trading pair\"},\"tokenB()\":{\"notice\":\"The second token in the trading pair\"}},\"notice\":\"The contract implements security measures including reentrancy protection and access control.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleDEX.sol\":\"SimpleDEX\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/SimpleDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title SimpleDEX\\n * @dev A simple decentralized exchange implementation that enables swapping between two ERC20 tokens\\n * using the constant product formula (x+dx)(y-dy)=xy for price calculation.\\n * @notice The contract implements security measures including reentrancy protection and access control.\\n * @author Ivan Carneiro\\n */\\n\\ncontract SimpleDEX is Ownable, ReentrancyGuard {\\n    /// @notice The first token in the trading pair\\n    IERC20 public tokenA;\\n\\n    /// @notice The second token in the trading pair\\n    IERC20 public tokenB;\\n\\n    // Events\\n    /**\\n     * @dev Emitted when liquidity is added to the pool by the owner\\n     * @param provider Address of the liquidity provider (owner)\\n     * @param amountA Amount of TokenA added\\n     * @param amountB Amount of TokenB added\\n     */\\n    event LiquidityAdded(address indexed provider, uint256 amountA, uint256 amountB);\\n\\n    /**\\n     * @dev Emitted when liquidity is removed from the pool by the owner\\n     * @param provider Address of the liquidity provider (owner)\\n     * @param amountA Amount of TokenA removed\\n     * @param amountB Amount of TokenB removed\\n     */\\n    event LiquidityRemoved(address indexed provider, uint256 amountA, uint256 amountB);\\n\\n    /**\\n     * @dev Emitted when a token swap occurs\\n     * @param user Address of the user performing the swap\\n     * @param tokenIn Address of the token being sold\\n     * @param tokenOut Address of the token being bought\\n     * @param amountIn Amount of tokens being sold\\n     * @param amountOut Amount of tokens being bought\\n     */\\n    event TokenSwapped(address indexed user, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /**\\n     * @dev Constructor initializes the DEX with addresses of both tokens\\n     * @param _tokenA Address of the first token\\n     * @param _tokenB Address of the second token\\n     */\\n    constructor(address _tokenA, address _tokenB) Ownable(msg.sender) {\\n        require(_tokenA != address(0) && _tokenB != address(0), \\\"Invalid token addresses\\\");\\n        tokenA = IERC20(_tokenA);\\n        tokenB = IERC20(_tokenB);\\n    }\\n\\n    /**\\n     * @dev Returns the current reserves of both tokens in the pool\\n     * @return reserveA Current balance of TokenA\\n     * @return reserveB Current balance of TokenB\\n     */\\n    function getReserves() public view returns (uint256 reserveA, uint256 reserveB) {\\n        reserveA = tokenA.balanceOf(address(this));\\n        reserveB = tokenB.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Allows only the owner to add liquidity to the pool\\n     * @param amountA Amount of TokenA to add\\n     * @param amountB Amount of TokenB to add\\n     * @notice Only the owner can call this function\\n     * @notice Tokens must be approved before calling this function\\n     */\\n    function addLiquidity(uint256 amountA, uint256 amountB) external onlyOwner nonReentrant {\\n        require(amountA > 0 && amountB > 0, \\\"Amounts must be greater than 0\\\");\\n\\n        // Transfer tokens to the contract\\n        require(tokenA.transferFrom(owner(), address(this), amountA), \\\"Transfer of tokenA failed\\\");\\n        require(tokenB.transferFrom(owner(), address(this), amountB), \\\"Transfer of tokenB failed\\\");\\n\\n        emit LiquidityAdded(owner(), amountA, amountB);\\n    }\\n\\n    /**\\n     * @dev Allows only the owner to remove liquidity from the pool\\n     * @param amountA Amount of TokenA to remove\\n     * @param amountB Amount of TokenB to remove\\n     * @notice Only the owner can call this function\\n     */\\n    function removeLiquidity(uint256 amountA, uint256 amountB) external onlyOwner nonReentrant {\\n        require(amountA > 0 && amountB > 0, \\\"Amounts must be greater than 0\\\");\\n\\n        (uint256 reserveA, uint256 reserveB) = getReserves();\\n        require( amountA <= reserveA && amountB <= reserveB, \\\"Insufficient liquidity\\\");\\n\\n        // Transfer tokens back to the owner\\n        require(tokenA.transfer(owner(), amountA), \\\"Transfer of tokenA failed\\\");\\n        require(tokenB.transfer(owner(), amountB), \\\"Transfer of tokenB failed\\\");\\n\\n        emit LiquidityRemoved(owner(), amountA, amountB);\\n    }\\n\\n    /**\\n     * @dev Swaps TokenA for TokenB using the constant product formula\\n     * @param amountAIn Amount of TokenA to swap\\n     * @return amountBOut Amount of TokenB received\\n     * @notice Tokens must be approved before calling this function\\n     */\\n    function swapAforB(uint256 amountAIn) external returns (uint256 amountBOut) {\\n        require(amountAIn > 0, \\\"Amount must be greater than 0\\\");\\n\\n        (uint256 reserveA, uint256 reserveB) = getReserves();\\n        require(reserveA > 0 && reserveB > 0, \\\"Insufficient liquidity\\\");\\n\\n        // Calculate output amount using constant product formula\\n        // (x + dx)(y - dy) = xy\\n        // dy = (y * dx) / (x + dx)\\n        amountBOut = (reserveB * amountAIn) / (reserveA + amountAIn);\\n\\n        require(amountBOut > 0, \\\"Insufficient output amount\\\");\\n        require(amountBOut < reserveB, \\\"Insufficient liquidity\\\");\\n\\n        require(tokenA.transferFrom(owner(), address(this), amountAIn), \\\"Transfer of tokenA failed\\\");\\n        require(tokenB.transfer(owner(), amountBOut), \\\"Transfer of tokenB failed\\\");\\n\\n        emit TokenSwapped(owner(), address(tokenA), address(tokenB), amountAIn, amountBOut);\\n        return amountBOut;\\n    }\\n\\n    /**\\n     * @dev Swaps TokenB for TokenA using the constant product formula\\n     * @param amountBIn Amount of TokenB to swap\\n     * @return amountAOut Amount of TokenA received\\n     * @notice Tokens must be approved before calling this function\\n     */\\n    function swapBforA(uint256 amountBIn) external nonReentrant returns (uint256 amountAOut) {\\n        require(amountBIn > 0, \\\"Amount must be greater than 0\\\");\\n\\n        (uint256 reserveA, uint256 reserveB) = getReserves();\\n        require(reserveA > 0 && reserveB > 0, \\\"Insufficient liquidity\\\");\\n\\n        // Calculate output amount using constant product formula\\n        amountAOut = (reserveA * amountBIn) / (reserveB + amountBIn);\\n\\n        require(amountAOut > 0, \\\"Insufficient output amount\\\");\\n        require(amountAOut < reserveA, \\\"Insufficient liquidity\\\");\\n\\n        require(tokenB.transferFrom(owner(), address(this), amountBIn), \\\"Transfer of tokenB failed\\\");\\n        require(tokenA.transfer(owner(), amountAOut), \\\"Transfer of tokenA failed\\\");\\n\\n        emit TokenSwapped(owner(), address(tokenB), address(tokenA), amountBIn, amountAOut);\\n        return amountAOut;\\n    }\\n\\n    /**\\n     * @dev Returns the current price of the specified token in terms of the other token\\n     * @param _token Address of the token to get the price for\\n     * @return Price of the token with 18 decimal places\\n     * @notice Price is expressed as how many of the other token you get for 1 of this token\\n     */\\n    function getPrice(address _token) external view returns (uint256) {\\n        require(_token == address(tokenA) || _token == address(tokenB), \\\"Invalid token address\\\");\\n\\n        (uint256 reserveA, uint256 reserveB) = getReserves();\\n        require(reserveA > 0 && reserveB > 0, \\\"Empty reserves\\\");\\n\\n        // Returns price normalized to 18 decimal places\\n        if (_token == address(tokenA)) {\\n            return (reserveB * 1e18) / reserveA; // Price of TokenA in terms of TokenB\\n        } else {\\n            return (reserveA * 1e18) / reserveB; // Price of TokenB in terms of TokenA\\n        }\\n    }\\n}\",\"keccak256\":\"0x2ef9361479aa6df58948cf1e7842c5a6849ab29e0506884ed4958f28d2c01de4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012943803806200129483398101604081905262000034916200017a565b33806200005c57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b62000067816200010d565b50600180556001600160a01b038216158015906200008d57506001600160a01b03811615155b620000db5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604482015260640162000053565b600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055620001b2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200017557600080fd5b919050565b600080604083850312156200018e57600080fd5b62000199836200015d565b9150620001a9602084016200015d565b90509250929050565b6110d280620001c26000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638014a7aa116100715780638014a7aa146101395780638da5cb5b1461014c5780639cd441da1461015d5780639d7de6b314610170578063e4f1f70a14610183578063f2fde38b1461019657600080fd5b80630902f1ac146100ae5780630fc63d10146100d057806341976e09146100fb5780635f64b55b1461011c578063715018a61461012f575b600080fd5b6100b66101a9565b604080519283526020830191909152015b60405180910390f35b6002546100e3906001600160a01b031681565b6040516001600160a01b0390911681526020016100c7565b61010e610109366004610ecc565b61028d565b6040519081526020016100c7565b6003546100e3906001600160a01b031681565b6101376103ac565b005b61010e610147366004610efc565b6103c0565b6000546001600160a01b03166100e3565b61013761016b366004610f15565b6106ad565b61013761017e366004610f15565b6108b2565b61010e610191366004610efc565b610b0c565b6101376101a4366004610ecc565b610de7565b6002546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156101f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021a9190610f37565b6003546040516370a0823160e01b81523060048201529193506001600160a01b0316906370a0823190602401602060405180830381865afa158015610263573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102879190610f37565b90509091565b6002546000906001600160a01b03838116911614806102b957506003546001600160a01b038381169116145b6103025760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b60448201526064015b60405180910390fd5b60008061030d6101a9565b915091506000821180156103215750600081115b61035e5760405162461bcd60e51b815260206004820152600e60248201526d456d70747920726573657276657360901b60448201526064016102f9565b6002546001600160a01b0390811690851603610399578161038782670de0b6b3a7640000610f66565b6103919190610f83565b949350505050565b8061038783670de0b6b3a7640000610f66565b6103b4610e25565b6103be6000610e52565b565b60006103ca610ea2565b6000821161041a5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016102f9565b6000806104256101a9565b915091506000821180156104395750600081115b6104555760405162461bcd60e51b81526004016102f990610fa5565b61045f8482610fd5565b6104698584610f66565b6104739190610f83565b9250600083116104c55760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e7400000000000060448201526064016102f9565b8183106104e45760405162461bcd60e51b81526004016102f990610fa5565b6003546001600160a01b03166323b872dd6105076000546001600160a01b031690565b30876040518463ffffffff1660e01b815260040161052793929190610fe8565b6020604051808303816000875af1158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a919061100c565b6105865760405162461bcd60e51b81526004016102f99061102e565b6002546001600160a01b031663a9059cbb6105a96000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af11580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a919061100c565b6106365760405162461bcd60e51b81526004016102f990611065565b6000546001600160a01b0316600354600254604080516001600160a01b03938416815291831660208301528101879052606081018690529116907fd36cc53ba71bc76a3db3364981f5296dd4ca5eba0e8c89874f2170515bd20d249060800160405180910390a250506106a860018055565b919050565b6106b5610e25565b6106bd610ea2565b6000821180156106cd5750600081115b6107195760405162461bcd60e51b815260206004820152601e60248201527f416d6f756e7473206d7573742062652067726561746572207468616e2030000060448201526064016102f9565b6002546001600160a01b03166323b872dd61073c6000546001600160a01b031690565b30856040518463ffffffff1660e01b815260040161075c93929190610fe8565b6020604051808303816000875af115801561077b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079f919061100c565b6107bb5760405162461bcd60e51b81526004016102f990611065565b6003546001600160a01b03166323b872dd6107de6000546001600160a01b031690565b30846040518463ffffffff1660e01b81526004016107fe93929190610fe8565b6020604051808303816000875af115801561081d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610841919061100c565b61085d5760405162461bcd60e51b81526004016102f99061102e565b60005460408051848152602081018490526001600160a01b03909216917fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee45910160405180910390a26108ae60018055565b5050565b6108ba610e25565b6108c2610ea2565b6000821180156108d25750600081115b61091e5760405162461bcd60e51b815260206004820152601e60248201527f416d6f756e7473206d7573742062652067726561746572207468616e2030000060448201526064016102f9565b6000806109296101a9565b9150915081841115801561093d5750808311155b6109595760405162461bcd60e51b81526004016102f990610fa5565b6002546001600160a01b031663a9059cbb61097c6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018790526044016020604051808303816000875af11580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed919061100c565b610a095760405162461bcd60e51b81526004016102f990611065565b6003546001600160a01b031663a9059cbb610a2c6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d919061100c565b610ab95760405162461bcd60e51b81526004016102f99061102e565b60005460408051868152602081018690526001600160a01b03909216917f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd059910160405180910390a250506108ae60018055565b6000808211610b5d5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016102f9565b600080610b686101a9565b91509150600082118015610b7c5750600081115b610b985760405162461bcd60e51b81526004016102f990610fa5565b610ba28483610fd5565b610bac8583610f66565b610bb69190610f83565b925060008311610c085760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e7400000000000060448201526064016102f9565b808310610c275760405162461bcd60e51b81526004016102f990610fa5565b6002546001600160a01b03166323b872dd610c4a6000546001600160a01b031690565b30876040518463ffffffff1660e01b8152600401610c6a93929190610fe8565b6020604051808303816000875af1158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad919061100c565b610cc95760405162461bcd60e51b81526004016102f990611065565b6003546001600160a01b031663a9059cbb610cec6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5d919061100c565b610d795760405162461bcd60e51b81526004016102f99061102e565b6000546001600160a01b0316600254600354604080516001600160a01b03938416815291831660208301528101879052606081018690529116907fd36cc53ba71bc76a3db3364981f5296dd4ca5eba0e8c89874f2170515bd20d249060800160405180910390a25050919050565b610def610e25565b6001600160a01b038116610e1957604051631e4fbdf760e01b8152600060048201526024016102f9565b610e2281610e52565b50565b6000546001600160a01b031633146103be5760405163118cdaa760e01b81523360048201526024016102f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403610ec557604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600060208284031215610ede57600080fd5b81356001600160a01b0381168114610ef557600080fd5b9392505050565b600060208284031215610f0e57600080fd5b5035919050565b60008060408385031215610f2857600080fd5b50508035926020909101359150565b600060208284031215610f4957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610f7d57610f7d610f50565b92915050565b600082610fa057634e487b7160e01b600052601260045260246000fd5b500490565b602080825260169082015275496e73756666696369656e74206c697175696469747960501b604082015260600190565b80820180821115610f7d57610f7d610f50565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561101e57600080fd5b81518015158114610ef557600080fd5b60208082526019908201527f5472616e73666572206f6620746f6b656e42206661696c656400000000000000604082015260600190565b60208082526019908201527f5472616e73666572206f6620746f6b656e41206661696c65640000000000000060408201526060019056fea264697066735822122056522ddb1598486c88511d75ee23b4fef103e87276ab20732a5d3487be59c34f64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Ivan Carneiro",
    "details": "A simple decentralized exchange implementation that enables swapping between two ERC20 tokens using the constant product formula (x+dx)(y-dy)=xy for price calculation.",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "LiquidityAdded(address,uint256,uint256)": {
        "details": "Emitted when liquidity is added to the pool by the owner",
        "params": {
          "amountA": "Amount of TokenA added",
          "amountB": "Amount of TokenB added",
          "provider": "Address of the liquidity provider (owner)"
        }
      },
      "LiquidityRemoved(address,uint256,uint256)": {
        "details": "Emitted when liquidity is removed from the pool by the owner",
        "params": {
          "amountA": "Amount of TokenA removed",
          "amountB": "Amount of TokenB removed",
          "provider": "Address of the liquidity provider (owner)"
        }
      },
      "TokenSwapped(address,address,address,uint256,uint256)": {
        "details": "Emitted when a token swap occurs",
        "params": {
          "amountIn": "Amount of tokens being sold",
          "amountOut": "Amount of tokens being bought",
          "tokenIn": "Address of the token being sold",
          "tokenOut": "Address of the token being bought",
          "user": "Address of the user performing the swap"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "details": "Allows only the owner to add liquidity to the pool",
        "params": {
          "amountA": "Amount of TokenA to add",
          "amountB": "Amount of TokenB to add"
        }
      },
      "constructor": {
        "details": "Constructor initializes the DEX with addresses of both tokens",
        "params": {
          "_tokenA": "Address of the first token",
          "_tokenB": "Address of the second token"
        }
      },
      "getPrice(address)": {
        "details": "Returns the current price of the specified token in terms of the other token",
        "params": {
          "_token": "Address of the token to get the price for"
        },
        "returns": {
          "_0": "Price of the token with 18 decimal places"
        }
      },
      "getReserves()": {
        "details": "Returns the current reserves of both tokens in the pool",
        "returns": {
          "reserveA": "Current balance of TokenA",
          "reserveB": "Current balance of TokenB"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLiquidity(uint256,uint256)": {
        "details": "Allows only the owner to remove liquidity from the pool",
        "params": {
          "amountA": "Amount of TokenA to remove",
          "amountB": "Amount of TokenB to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "swapAforB(uint256)": {
        "details": "Swaps TokenA for TokenB using the constant product formula",
        "params": {
          "amountAIn": "Amount of TokenA to swap"
        },
        "returns": {
          "amountBOut": "Amount of TokenB received"
        }
      },
      "swapBforA(uint256)": {
        "details": "Swaps TokenB for TokenA using the constant product formula",
        "params": {
          "amountBIn": "Amount of TokenB to swap"
        },
        "returns": {
          "amountAOut": "Amount of TokenA received"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "SimpleDEX",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "notice": "Only the owner can call this functionTokens must be approved before calling this function"
      },
      "getPrice(address)": {
        "notice": "Price is expressed as how many of the other token you get for 1 of this token"
      },
      "removeLiquidity(uint256,uint256)": {
        "notice": "Only the owner can call this function"
      },
      "swapAforB(uint256)": {
        "notice": "Tokens must be approved before calling this function"
      },
      "swapBforA(uint256)": {
        "notice": "Tokens must be approved before calling this function"
      },
      "tokenA()": {
        "notice": "The first token in the trading pair"
      },
      "tokenB()": {
        "notice": "The second token in the trading pair"
      }
    },
    "notice": "The contract implements security measures including reentrancy protection and access control.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 944,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1016,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "tokenA",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)877"
      },
      {
        "astId": 1020,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "tokenB",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)877"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)877": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}